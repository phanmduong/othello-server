{"version":3,"sources":["helpers/utility.js","Store.js","component/common/Form.js","component/HOC/generatorFormItem.js","component/common/FormInput.js","component/common/FormButton.js","services/socketio.js","constants/index.js","component/ModalFormName.js","component/ListRoom.js","helpers/entity/mobx.js","component/Board.js","component/Drawer.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","data","undefined","removeProp","props","key","arguments","length","newProps","Object","keys","objectSpread","forEach","keyProp","UserStore","name","username","socket","status","chessman","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","observable","RoomStore","id","playerWhite","playerBlack","board","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","src_Store","_this","roomsStore","filter","room","currentRoomId","getCurrentRoom","player","currentChessman","userStore","action","_this2","visibleModalName","user","rooms","push","roomData","_this3","map","_this4","computed","CustomForm","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","onSubmit","getForm","react_default","a","createElement","es_form","children","Component","childContextTypes","PropTypes","object","isRequired","Form","create","generatorFormItem","WrappedComponent","FormItem","_Component","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","value","getFieldDecorator","context","_this$props","onChange","defaultValue","rules","options","initialValue","Item","contextTypes","InputComponent","Input","FormInput","getValue","getFieldValue","setValue","setFieldsValue","defineProperty","clear","addSuffixClearValueToProps","beforeProps","component","keyComponent","React","cloneElement","addPropsComponent","onClick","suffix","suffixClear","FormButton","es_button","io","constants","CONNECTION","LOG_IN","LOG_OUT","JOIN_ROOM","READY_TO_PLAY","TICK","LOG_IN_SUCCESS","JOINED_ROOM","OUT_ROOM","UPDATE_ROOM","JOINED_GAME","UPDATE_BOARD","FINISH","Board","ROW","COL","Cell","EMPTY","WHITE","BLACK","Status","AVAILABLE","PLAYING","ONLINE","IN_ROOM","GameResult","WIN","LOSE","ClientListener","constant","ServerListener","ModalFormName","observer","submitModalName","emit","on","dataSocket","store","modal","title","visible","footer","closable","FormInput_FormInput","placeholder","required","message","style","display","justifyContent","alignItems","FormButton_FormButton","type","htmlType","ListRoom","joinRoom","roomId","countPlayer","count","renderRoom","index","numberPlayer","col","span","className","concat","updateRoom","setCurrentRoom","es_row","gutter","isUndefined","isNull","ClientConstant","RoomConstant","XX","YY","evaluateMove","reverseChessman","x","y","xMove","yMove","x1","y1","checkWin","chessmanWhite","chessmanBlack","row","cell","onClickCell","move","reverseCell","partner","xx","yy","updateBoard","createFences","fences","removeObservable","dataInput","slice","Array","isArray","item","entries","reduce","acc","_ref","_ref2","slicedToArray","i","j","k","isAvailableMove","moves","fill","renderWin","isFull","isFullBoard","result","onCancel","window","location","reload","fontSize","fontWeight","checkUpdateBoard","timeout","clearTimeout","setTimeout","isMove","isMovable","yourTurn","renderBoard","indexX","indexY","totalChessman","Drawer","padding","flexDirection","avatar","size","icon","marginTop","color","marginBottom","textAlign","Header","Layout","Sider","Content","App","component_ModalFormName","layout","width","background","component_Drawer","margin","minWidth","minHeight","height","borderRadius","component_ListRoom","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static1/js/main.2d6359b6.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function URL_add_parameter(param, value) {\n    let hash = {};\n    let url = window.location.href;\n\n    let parameters = url.split(/\\?|&/);\n\n    for (let i = 0; i < parameters.length; i++) {\n        if (!parameters[i]) continue;\n\n        let ary = parameters[i].split(\"=\");\n        hash[ary[0]] = ary[1];\n    }\n\n    hash[param] = value;\n\n    let list = [];\n    Object.keys(hash).forEach(function (key) {\n        if (hash[key]) {\n            list.push(key + \"=\" + hash[key]);\n        }\n    });\n\n    url = window.location.pathname + \"?\" + list.join(\"&\");\n    return url;\n}\n\nexport function reload_url(url) {\n    window.location.href = url;\n}\n\nexport function isEmpty(data) {\n    return data == undefined || data == null || data == \"\";\n}\n\n/**\n * Add props to component\n * @param {*} beforeProps\n * @param {*} props\n * @param {*} component\n * @param {*} keyComponent\n */\nexport function addPropsComponent(beforeProps, props = {}, component = null, keyComponent = null) {\n    if (component && keyComponent) {\n        component = React.cloneElement(component, props);\n        return {\n            ...beforeProps,\n            [keyComponent]: component\n        };\n    }\n    return beforeProps;\n}\n\n/**\n * remove property in props\n * @param {*} props\n * @param {*} key\n */\nexport function removeProp(props, key = null) {\n    let newProps = {};\n    if (key) {\n        Object.keys({...props}).forEach((keyProp) => {\n            if (keyProp !== key) {\n                newProps[keyProp] = props[keyProp];\n            }\n        });\n        return newProps;\n    }\n    return props;\n\n}\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function formatPagination(pagination) {\n    return {\n        pageSize: parseInt(pagination.per_page),\n        current: pagination.current_page,\n        total: pagination.total\n    };\n}\n\n/**\n * convert data sort of ant table with server sort\n * @param {*} sorter sorter of ant table\n * @param {*} key key of object need sort in server\n */\nexport function formatSortTable(sorter, key) {\n    if (key == sorter.field) {\n        if (sorter.order == \"ascend\") return \"asc\";\n        else {\n            return \"desc\";\n        }\n    }\n    return \"\";\n}\n\n/**\n *\n * @param location = props.location\n * @param key params\n * @returns {string || null} value params\n */\n\nexport function redirectURL(url) {\n    window.location.replace(url);\n}\n\n\nexport function getLastArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[arr.length - 1];\n    }\n    return null;\n}\n\nexport function getFirstArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[0];\n    }\n    return null;\n}\n\nexport function isEmptyArr(arr) {\n    if (arr && arr.length > 0) {\n        return false;\n    }\n    return true;\n}\n\nexport function isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));\n}\n\n/**\n *\n * @param array array need to check\n * @param item empty if use filter custom\n * @param key empty if use filter custom\n * @param filter filter custom\n * @returns {boolean}\n */\nexport function isExistArray(array, item, key, filter) {\n    if (!isEmptyArr(array) && !isEmpty(item) && !isEmpty(key)) {\n        if (filter) {\n            return array.filter(filter).length > 0;\n        } else {\n            return array.filter((dataItem) => dataItem[key] == item[key]).length > 0;\n        }\n    }\n\n    return false;\n}\n\nexport function convertUrlImageBackground(url) {\n    return `url(${url}) center center / cover`;\n}\n\nexport function clearArray(arr) {\n    while (arr.length) {\n        arr.pop();\n    }\n}\n\nexport function linkRoute(rootLink, data) {\n    let link = rootLink;\n    Object.keys(data).forEach((key) => {\n        const re = new RegExp(`:${key}`, 'g');\n        link = link.replace(re, data[key]);\n    });\n\n    return link;\n}\n\nexport function checkLink(routeLink, link) {\n    return routeLink == link;\n}\n\n/**\n * get value of object with string key\n * @param object example: {post: {creator: 'A'}}\n * @param strKey example: \"post.creator\"\n * @returns {*} example: A\n */\n\nexport function getValueObjectFromStringKey(object, strKey) {\n    let arrKey = strKey.split('.');\n    let objectData = {...object};\n    arrKey.forEach((key) => {\n        if (isEmpty(objectData)) return;\n\n        objectData = objectData[key];\n    });\n    return objectData;\n}\n\nexport function randomStr() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (let i = 0; i < 32; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n\n}","import {observable, action, computed} from \"mobx\";\nimport {isEmpty} from \"./helpers/utility\";\n\nclass UserStore {\n    @observable name = '';\n    @observable username = '';\n    @observable socket = '';\n    @observable status = '';\n    @observable chessman = '';\n\n    constructor(name, username, socket, status, chessman) {\n        this.name = name;\n        this.username = username;\n        this.socket = socket;\n        this.status = status;\n        this.chessman = chessman;\n    }\n}\n\nclass RoomStore {\n    @observable id = '';\n    @observable playerWhite = '';\n    @observable playerBlack = '';\n    @observable status = '';\n    @observable currentChessman = '';\n    @observable board = [];\n\n\n    constructor(id, playerWhite, playerBlack, status, board, chessman) {\n        this.id = id;\n        this.playerWhite = playerWhite;\n        this.playerBlack = playerBlack;\n        this.status = status;\n        this.board = board;\n        this.chessman = chessman;\n    }\n}\n\n\nclass Store {\n    @observable visibleModalName = true;\n    @observable userStore = {};\n    @observable roomsStore = [];\n    @observable currentRoomId;\n    @observable status = \"choose room\";\n    @observable result;\n\n\n    @action\n    submitModalName = (data) => {\n        this.visibleModalName = false;\n        const user = data.user;\n        this.userStore = new UserStore(user.name, user.username, user.socket, user.status, user.chessman);\n        data.rooms.forEach((room) => {\n            this.roomsStore.push(new RoomStore(room.id, room.playerWhite, room.playerBlack, room.status, room.board, room.currentChessman))\n        })\n    }\n\n    @action\n    updateRoom = (roomData) => {\n        this.roomsStore = this.roomsStore.map((room) => {\n            if (room.id == roomData.id) {\n                Object.keys(roomData).map((key) => {\n                    room[key] = roomData[key];\n                })\n            }\n            return room;\n\n        });\n    }\n\n    @action\n    setCurrentRoom = (roomData) => {\n        this.status = \"playing\";\n        this.currentRoomId = roomData.id;\n    };\n\n    @computed get getCurrentRoom() {\n        return this.roomsStore.filter(room => room.id == this.currentRoomId)[0];\n    }\n\n    @computed get yourTurn() {\n        const room = this.getCurrentRoom;\n        const player = this.player;\n        return player.chessman == room.currentChessman;\n    }\n\n    @computed get partner() {\n        const room = this.getCurrentRoom;\n        if (isEmpty(room)) return null;\n        return room.playerBlack && this.userStore.username == room.playerBlack.username ? room.playerWhite : room.playerBlack;\n    }\n\n    @computed get player() {\n        const room = this.getCurrentRoom;\n        if (isEmpty(room)) return null;\n        return room.playerWhite && this.userStore.username == room.playerWhite.username ? room.playerWhite : room.playerBlack;\n    }\n\n}\n\nexport default new Store();","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"antd\";\n\nclass CustomForm extends Component {\n  getChildContext() {\n    return {\n      form: this.props.form\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.onSubmit(values);\n      }\n    });\n  };\n\n  getForm = () => {\n    return this.props.form;\n  };\n\n  render() {\n    return <Form onSubmit={this.handleSubmit}>{this.props.children}</Form>;\n  }\n}\n\nCustomForm.childContextTypes = {\n  form: PropTypes.object.isRequired\n};\n\nCustomForm.propTypes = {\n  className: PropTypes.string,\n  rules: PropTypes.array,\n  onSubmit: PropTypes.func\n};\n\nexport default Form.create()(CustomForm);\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Form} from \"antd\";\nimport {removeProp} from \"../../helpers/utility\";\n\nconst generatorFormItem = () => {\n    return WrappedComponent => {\n        class FormItem extends Component {\n            static contextTypes = {\n                form: PropTypes.object.isRequired\n            };\n\n            constructor(props) {\n                super(props);\n            }\n\n            render() {\n                const {getFieldDecorator} = this.context.form;\n                const {onChange, defaultValue, rules, name} = this.props;\n\n                const options = {};\n\n                if (rules) {\n                    options.rules = rules;\n                }\n\n                if (onChange) {\n                    options.onChange = onChange;\n                }\n\n                if (defaultValue) {\n                    options.initialValue = defaultValue;\n                }\n\n                const props = removeProp(this.props, 'defaultValue');\n\n                return (\n                    <Form.Item>\n                        {getFieldDecorator(name, options)(\n                            <WrappedComponent {...props}>\n                                {this.props.children}\n                            </WrappedComponent>\n                        )}\n                    </Form.Item>\n                );\n            }\n        }\n\n        return FormItem;\n    };\n};\n\nexport default generatorFormItem;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport generatorFormItem from \"../HOC/generatorFormItem\";\nimport {Input} from \"antd\";\nimport {addPropsComponent, removeProp} from \"../../helpers/utility\";\n\nconst InputComponent = generatorFormItem()(Input);\n\nexport default class FormInput extends Component {\n    static propTypes = {\n        rules: PropTypes.array,\n        name: PropTypes.string.isRequired,\n        defaultValue: PropTypes.string,\n        suffixClear: PropTypes.bool //check clear value of input when click suffix\n    };\n\n    static contextTypes = {\n        form: PropTypes.object.isRequired\n    };\n\n    getValue = () => {\n        return this.context.form.getFieldValue(this.props.name);\n    };\n\n    setValue = value => {\n        this.context.form.setFieldsValue({[this.props.name]: value});\n    };\n\n    //event clear value input\n    clear = () => {\n        this.setValue(\"\");\n    };\n\n    //add suffix clear when click suffix\n    addSuffixClearValueToProps = beforeProps => {\n        const value = this.getValue() === undefined ? beforeProps.defaultValue : this.getValue();\n\n        beforeProps = removeProp(beforeProps, \"suffixClear\");\n\n        if (value) {\n            let props = {\n                onClick: () => {\n                    this.clear();\n                }\n            };\n\n            // add props to suffix\n            return addPropsComponent(beforeProps, props, this.props.suffix, \"suffix\");\n        } else {\n            //remove suffix in props\n            return removeProp(beforeProps, \"suffix\");\n        }\n    };\n\n    render() {\n        const {suffixClear, suffix} = this.props;\n        let props = {...this.props};\n\n        if (suffixClear && suffix) {\n            props = this.addSuffixClearValueToProps(props);\n        }\n\n        return <InputComponent {...props} />;\n    }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Form } from \"antd\";\n\nexport default class FormButton extends Component {\n  static propTypes = {\n    type: PropTypes.string,\n    htmlType: PropTypes.string,\n    size: PropTypes.string,\n    className: PropTypes.string\n  };\n\n  render() {\n    return (\n      <Form.Item>\n        <Button {...this.props}>{this.props.children}</Button>\n      </Form.Item>\n    );\n  }\n}\n","import io from 'socket.io-client';\nimport {SOCKET_PORT, SOCKET_HOST} from '../constants/env';\n\nconst url = SOCKET_PORT ? `${SOCKET_HOST}:${SOCKET_PORT}` : '/';\n\nconst socket = io(url);\n\nexport default socket;","export default {\n    ServerListener: {\n        CONNECTION: 'connection',\n        LOG_IN: \"LOGIN\",\n        LOG_OUT: 'disconnect',\n        JOIN_ROOM: 'JOIN_ROOM',\n        READY_TO_PLAY: 'READY_TO_PLAY',\n        TICK: 'TICK',\n    },\n    ClientListener: {\n        LOG_IN_SUCCESS: 'LOG_IN_SUCCESS',\n        JOINED_ROOM: 'JOINED_ROOM',\n        OUT_ROOM: 'OUT_ROOM',\n        UPDATE_ROOM: 'UPDATE_ROOM',\n        JOINED_GAME: 'JOINED_GAME',\n        UPDATE_BOARD: 'UPDATE_BOARD',\n        FINISH: 'FINISH'\n    },\n    Room: {\n        Board: {\n            ROW: 8,\n            COL: 8,\n            Cell: {\n                EMPTY: null,\n                WHITE: 1,\n                BLACK: 2\n            }\n        },\n        Status: {\n            EMPTY: 0,\n            AVAILABLE: 1,\n            PLAYING: 2\n        }\n    },\n    Client: {\n        Status: {\n            ONLINE: 'ONLINE',\n            IN_ROOM: 'IN_ROOM',\n            PLAYING: 'PLAYING'\n        },\n        GameResult: {\n            WIN: 'WIN',\n            LOSE: 'LOSE'\n        }\n    },\n}","import React, {Component} from 'react';\nimport {Modal} from \"antd\";\nimport Form from \"./common/Form\";\nimport FormInput from \"./common/FormInput\";\nimport FormButton from \"./common/FormButton\";\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n@observer\nclass ModalFormName extends Component {\n\n    submitModalName = (data) => {\n        socket.emit(ServerListener.LOG_IN, data);\n        socket.on(ClientListener.LOG_IN_SUCCESS, (dataSocket) => {\n            store.submitModalName(dataSocket);\n        });\n\n    };\n\n    render() {\n        return (\n            <Modal\n                title=\"Điền tên của bạn\"\n                visible={store.visibleModalName}\n                footer={null}\n                closable={false}\n            >\n                <Form onSubmit={this.submitModalName}>\n                    <FormInput\n                        name=\"name\"\n                        suffixClear\n                        placeholder=\"Nhập tên của bạn\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Vui lòng nhập tên của bạn!\"\n                            }\n                        ]}\n\n                    />\n                    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                        <FormButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                        >\n                            Đồng ý\n                        </FormButton>\n                    </div>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default ModalFormName;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {Col, Row} from 'antd';\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\nconst RoomConstant = constant.Room;\n\n@observer\nclass ListRoom extends Component {\n\n    componentWillMount() {\n        socket.on(ClientListener.UPDATE_ROOM, (room) => {\n            store.updateRoom(room);\n        });\n        socket.on(ClientListener.JOINED_ROOM, (room) => {\n            store.updateRoom(room);\n            store.setCurrentRoom(room);\n        });\n        // socket.on(ClientListener.OUT_ROOM, (room) => {\n        //     store.updateRoom(room);\n        // });\n    }\n\n    joinRoom = (room) => {\n        socket.emit(ServerListener.JOIN_ROOM, {roomId: room.id});\n    };\n\n    countPlayer = (room) => {\n        let count = 0;\n        if (!isEmpty(room.playerWhite)) {\n            count++;\n        }\n        if (!isEmpty(room.playerBlack)) {\n            count++;\n        }\n        return count;\n    };\n\n    renderRoom = (room, index) => {\n        const numberPlayer = this.countPlayer(room);\n        return (\n            <Col span={4} key={index}>\n                <div className=\"room\" onClick={() => {\n                    if (room.status != 2) this.joinRoom(room)\n                }}>\n                    <div className={\"room-empty \" + `room-${room.status}-user`}>\n                        <div className=\"text\">\n                            {numberPlayer}/2\n                        </div>\n                    </div>\n                    <div className=\"room-name\">\n                        Phòng {room.id}\n                    </div>\n                </div>\n\n            </Col>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n\n                <Row gutter={24}>\n                    {\n                        store.roomsStore.map((room, index) => {\n                            return this.renderRoom(room, index);\n                        })\n                    }\n                </Row>\n            </div>\n\n        );\n    }\n}\n\nexport default ListRoom;\n","function isUndefined(data) {\n    return data === undefined;\n}\n\nfunction isNull(data) {\n    return data == null;\n}\n\nfunction isNotValue(data) {\n    return data == \"\";\n}\n\nfunction isEmpty(data) {\n    return isUndefined(data) || isNull(data) || isNotValue(data);\n}\n\nexport function removeObservable(dataInput) {\n\n    if (isUndefined(dataInput)) return undefined;\n\n    if (isNull(dataInput)) return null;\n\n    if (dataInput.slice && Array.isArray(dataInput.slice())) {\n        return dataInput.map((item) => {\n            return removeObservable(item);\n        });\n    }\n\n    if ((typeof dataInput) === 'object') {\n        return Object.entries(dataInput).reduce((acc, [key, value]) => {\n            return {...acc, [key]: removeObservable(value)};\n        }, {});\n    }\n\n    return dataInput;\n}","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {removeObservable} from \"../helpers/entity/mobx\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\nimport {Modal} from \"antd\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\nconst ClientConstant = constant.Client;\nconst RoomConstant = constant.Room;\n\nconst XX = [-1, -1, -1, 1, 1, 1, 0, 0];\nconst YY = [-1, 0, 1, -1, 0, 1, -1, 1];\n\nfunction evaluateMove(board, chessman, reverseChessman, x, y, xMove, yMove) {\n    let count = 0;\n    let x1 = x + xMove;\n    let y1 = y + yMove;\n    while (true) {\n        if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n            return false;\n        }\n\n        if (board[x1][y1] == reverseChessman) {\n            count++;\n        } else {\n            if (board[x1][y1] == chessman) {\n                break;\n            } else {\n                return false;\n            }\n\n        }\n        x1 = x1 + xMove;\n        y1 = y1 + yMove;\n    }\n\n    if (count > 0) {\n        return true;\n    }\n\n    return false;\n\n}\n\nfunction reverseCell(board, chessman, reverseChessman, x, y, xMove, yMove) {\n    let x1 = x + xMove;\n    let y1 = y + yMove;\n    while (true) {\n\n        if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n            return;\n        }\n\n        if (board[x1][y1] == reverseChessman) {\n            board[x1][y1] = chessman;\n        } else {\n            if (board[x1][y1] == chessman) {\n                break;\n            } else {\n                return;\n            }\n\n        }\n        x1 = x1 + xMove;\n        y1 = y1 + yMove;\n    }\n}\n\nfunction checkWin(board) {\n    let chessmanWhite = 0;\n    let chessmanBlack = 0;\n    board.forEach((row) => {\n        row.forEach((cell) => {\n            if (cell == RoomConstant.Board.Cell.WHITE) {\n                chessmanWhite++;\n            }\n            if (cell == RoomConstant.Board.Cell.BLACK) {\n                chessmanBlack++;\n            }\n        })\n    });\n    if (chessmanBlack > chessmanWhite) {\n        return RoomConstant.Board.Cell.BLACK;\n    }\n    if (chessmanBlack < chessmanWhite) {\n        return RoomConstant.Board.Cell.WHITE;\n    }\n    return 0;\n}\n\nfunction isFullBoard(board) {\n    let isFull = true;\n    board.forEach((row) => {\n        row.forEach((cell) => {\n            if (isEmpty(cell)) {\n                isFull = false;\n            }\n\n        })\n    });\n\n    return isFull;\n}\n\nfunction isMovable(fences) {\n    let isMove = false;\n    fences.forEach((row) => {\n        row.forEach((cell) => {\n            if (cell == -2) {\n                isMove = true;\n            }\n        })\n    });\n\n    return isMove;\n}\n\n@observer\nclass ListRoom extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        socket.on(ClientListener.JOINED_GAME, (room) => {\n            store.updateRoom(room);\n        });\n\n        socket.on(ClientListener.UPDATE_BOARD, (room) => {\n            store.updateRoom(room);\n        });\n\n        socket.on(ClientListener.FINISH, (data) => {\n            store.result = data.result;\n        });\n    }\n\n\n    onClickCell = (x, y, move) => {\n        store.getCurrentRoom.board[x][y] = store.player.chessman;\n\n        move.forEach((data) => {\n            reverseCell(store.getCurrentRoom.board, store.player.chessman, store.partner.chessman, x, y, data.xx, data.yy);\n        });\n\n        this.updateBoard();\n    };\n\n    updateBoard = () => {\n        socket.emit(ServerListener.TICK, store.getCurrentRoom.board);\n    };\n\n    createFences = () => {\n        let fences = removeObservable(store.getCurrentRoom.board);\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == 1 || fences[i][j] == 2) {\n                    for (let k = 0; k < 8; k++) {\n                        if (0 <= i + XX[k] && i + XX[k] < 8 && 0 <= j + YY[k] && j + YY[k] < 8 && !fences[i + XX[k]][j + YY[k]]) {\n                            fences[i + XX[k]][j + YY[k]] = -1;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        return fences;\n    }\n\n    isAvailableMove = (fences, board, chessman) => {\n        let moves = new Array(8).fill(null).map(() => new Array(8));\n        let reverseChessman;\n        if (chessman == 1) {\n            reverseChessman = 2;\n        } else {\n            reverseChessman = 1;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == -1) {\n                    for (let k = 0; k < 8; k++) {\n                        let isEvaluateMove = evaluateMove(board, chessman, reverseChessman, i, j, XX[k], YY[k]);\n                        if (isEvaluateMove) {\n                            fences[i][j] = -2;\n                            if (moves[i][j] == undefined) {\n                                moves[i][j] = [];\n                            }\n                            moves[i][j].push({xx: XX[k], yy: YY[k]});\n                        }\n                    }\n                }\n            }\n        }\n        return moves;\n    }\n\n    renderWin = () => {\n        return (\n            <Modal\n                title=\"Kết quả trận đấu\"\n                visible={isFullBoard(store.getCurrentRoom.board) || store.result}\n                footer={null}\n                closable={true}\n                onCancel={() => {\n                    window.location.reload();\n                }}\n            >\n                <div style={{fontSize: '30px', fontWeight: 'bold'}}>\n                    {\n                        store.result == ClientConstant.GameResult.WIN || checkWin(store.getCurrentRoom.board) == store.player.chessman ? \"Bạn thắng\" :\n                            checkWin(store.getCurrentRoom.board) == store.partner.chessman ? store.partner.name + \" thắng\" : \"Hòa\"\n                    }\n                </div>\n            </Modal>\n        )\n    };\n\n    checkUpdateBoard = (fences) => {\n        if (this.timeout != null) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => {\n            if (!isMovable(fences) && store.yourTurn) {\n                this.updateBoard();\n            }\n        }, 500);\n    }\n\n    renderBoard = () => {\n        let fences = this.createFences();\n        const moves = this.isAvailableMove(fences, store.getCurrentRoom.board, store.player.chessman);\n\n        this.checkUpdateBoard(fences);\n\n        return (\n            <div className=\"board-game\">\n                {\n                    store.getCurrentRoom.board.map((row, indexX) => {\n                        return (\n                            <div className=\"board-row\" key={indexX}>\n                                {\n                                    row.map((cell, indexY) => {\n                                        return (\n                                            <div\n                                                className={\"cell-game \" + (!moves[indexX][indexY] || !store.yourTurn ? \"not-allowed-cell\" : \"\")}\n                                                key={indexY}\n                                                onClick={() => {\n                                                    if (moves[indexX][indexY] && store.yourTurn) {\n                                                        this.onClickCell(indexX, indexY, moves[indexX][indexY]);\n                                                    }\n                                                }}>\n                                                {\n                                                    cell == RoomConstant.Board.Cell.BLACK ?\n                                                        <div className=\"dot-black\"/> :\n                                                        cell == RoomConstant.Board.Cell.WHITE ?\n                                                            <div className=\"dot-white\"/> :\n                                                            <div\n                                                                className={(moves[indexX][indexY] && store.yourTurn ?\n                                                                    (store.player.chessman == RoomConstant.Board.Cell.BLACK ?\n                                                                        \"hover-black\" : \"hover-white\") : \"not-allowed\")}/>\n                                                }\n\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        )\n\n                    })\n                }\n                {\n                    this.renderWin()\n                }\n            </div>\n        )\n    };\n\n    render() {\n        const room = store.getCurrentRoom;\n\n        if (room.status == RoomConstant.Status.PLAYING) {\n            return this.renderBoard();\n        }\n\n        return <div className=\"waiting-partner\">Đang đợi đối thủ...</div>;\n    }\n}\n\nexport default ListRoom;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {Avatar, Divider, Layout} from 'antd';\nimport constant from \"../constants\";\n\nconst RoomConstant = constant.Room;\n\nfunction totalChessman(board, chessman) {\n    let count = 0;\n    board.forEach((row) => {\n        row.forEach((cell) => {\n            if (cell == chessman) {\n                count++;\n            }\n        })\n    });\n    return count;\n}\n\n@observer\nclass Drawer extends Component {\n\n    componentDidMount() {\n    }\n\n    render() {\n        const userStore = store.userStore;\n        return (\n            <div style={{\n                padding: '20px 5px',\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'column'\n            }}>\n                <Avatar size={100} icon=\"user\"/>\n                <div style={{marginTop: 20}}>\n                    Xin chào,\n                </div>\n                <div style={{fontWeight: 'bold'}}>{userStore.name}</div>\n                <div style={{color: '#989898'}}>{userStore.username}</div>\n                <div style={{marginBottom: '20px'}}/>\n                {\n                    store.player && store.partner &&\n                    <div className=\"board-score\">\n                        {\n                            store.player &&\n                            <div style={{marginBottom: '30px'}}>\n                                <div className=\"name\">Bạn</div>\n                                <div className=\"container-score\">\n                                    <div\n                                        className={store.player.chessman == RoomConstant.Board.Cell.WHITE ? 'dot-white' : 'dot-black'}/>\n\n                                    <div className=\"score\">\n                                        x {totalChessman(store.getCurrentRoom.board, store.player.chessman)}\n                                    </div>\n                                </div>\n\n                            </div>\n                        }\n                        {\n                            store.partner &&\n                            <div style={{marginBottom: '30px'}}>\n                                <div className=\"name\">{store.partner.name}</div>\n                                <div style={{color: '#ececec', textAlign: 'center'}}>{store.partner.username}</div>\n                                <div className=\"container-score\">\n                                    <div\n                                        className={store.partner.chessman == RoomConstant.Board.Cell.WHITE ? 'dot-white' : 'dot-black'}/>\n                                    <div className=\"score\">\n                                        x {totalChessman(store.getCurrentRoom.board, store.partner.chessman)}\n                                    </div>\n                                </div>\n\n                            </div>\n                        }\n                        {store.yourTurn ? <div className=\"name\">Lượt bạn</div> :\n                            <div className=\"name\">Lượt đối thủ</div>}\n                    </div>\n                }\n\n\n            </div>\n        );\n    }\n}\n\nexport default Drawer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport store from \"./Store\";\nimport ModalFormName from \"./component/ModalFormName\";\nimport {Avatar, Divider, Layout} from 'antd';\nimport ListRoom from \"./component/ListRoom\";\nimport Board from \"./component/Board\";\nimport socket from \"./services/socketio\";\nimport constant from './constants';\nimport Drawer from \"./component/Drawer\";\n\nconst {Header, Sider, Content} = Layout;\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n\n@observer\nclass App extends Component {\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div>\n                <ModalFormName/>\n                <Layout className=\"layout\">\n                    <Header>\n                        <div style={{color: '#fff', fontSize: '22px', fontWeight: 'bold', textAlign: 'center'}}>\n                            {store.status == \"choose room\" ? \"Chọn phòng\" : \"Chơi\"}\n                        </div>\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{background: '#fff'}}>\n                            <Drawer/>\n                        </Sider>\n                        <Content\n                            style={{\n                                background: '#e2e2e2',\n                                padding: 24,\n                                margin: 0,\n                                minWidth: '800px',\n                                minHeight: 'calc(100vh - 64px)'\n                            }}>\n                            <div style={{\n                                background: '#fff',\n                                width: '100%',\n                                height: '100%',\n                                padding: 24,\n                                borderRadius: '10px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center'\n                            }}>\n                                {\n                                    store.status == \"choose room\" ? <ListRoom/> : <Board/>\n                                }\n\n\n                            </div>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a services worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our services worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a services worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // services worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a services ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register services worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous services worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during services worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the services worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure services worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No services worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about services workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}