{"version":3,"sources":["helpers/utility.js","model/user.js","model/room.js","Store.js","services/socketio.js","constants/index.js","view/common/Form.js","view/HOC/generatorFormItem.js","view/common/FormInput.js","view/common/FormButton.js","view/ModalFormName.js","controller/ModalFormName.js","view/Drawer.js","controller/Drawer.js","view/ListRoom.js","controller/ListRoom.js","helpers/entity/mobx.js","view/Board.js","controller/Board.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","data","undefined","removeProp","props","key","arguments","length","newProps","Object","keys","objectSpread","forEach","keyProp","UserStore","name","username","socket","status","chessman","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","observable","RoomStore","id","playerWhite","playerBlack","board","room_descriptor","room_descriptor2","room_descriptor3","room_descriptor4","room_descriptor5","_descriptor6","src_Store","_this","roomsStore","filter","room","currentRoomId","getCurrentRoom","player","currentChessman","userStore","action","_this2","visibleModalName","user","rooms","push","roomData","_this3","map","_this4","result","computed","io","constants","CONNECTION","LOG_IN","LOG_OUT","JOIN_ROOM","READY_TO_PLAY","TICK","FINISHED","LOG_IN_SUCCESS","JOINED_ROOM","OUT_ROOM","UPDATE_ROOM","JOINED_GAME","UPDATE_BOARD","FINISH","Board","ROW","COL","Cell","EMPTY","WHITE","BLACK","Status","AVAILABLE","PLAYING","ONLINE","IN_ROOM","GameResult","WIN","LOSE","CustomForm","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","onSubmit","getForm","react_default","a","createElement","es_form","children","Component","childContextTypes","PropTypes","object","isRequired","Form","create","generatorFormItem","WrappedComponent","FormItem","_Component","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","value","getFieldDecorator","context","_this$props","onChange","defaultValue","rules","options","initialValue","Item","contextTypes","InputComponent","Input","FormInput","getValue","getFieldValue","setValue","setFieldsValue","defineProperty","clear","addSuffixClearValueToProps","beforeProps","component","keyComponent","React","cloneElement","addPropsComponent","onClick","suffix","suffixClear","FormButton","es_button","ModalFormNameComponent","observer","modal","title","visible","store","footer","closable","submitModalName","FormInput_FormInput","placeholder","required","message","style","display","justifyContent","alignItems","FormButton_FormButton","type","htmlType","ClientListener","constant","ServerListener","ModalFormNameContainer","emit","on","dataSocket","ModalFormName","RoomConstant","DrawerComponent","padding","flexDirection","avatar","size","icon","marginTop","fontWeight","color","marginBottom","partner","className","totalChessman","textAlign","yourTurn","DrawerContainer","count","row","cell","Drawer","ListRoomComponent","renderRoom","index","numberPlayer","countPlayer","col","span","joinRoom","concat","es_row","gutter","ListRoomContainer","roomId","updateRoom","setCurrentRoom","ListRoom","isUndefined","isNull","ClientConstant","BoardComponent","renderWin","isFullBoard","onCancel","onFinish","fontSize","checkWin","renderBoard","fences","createFences","moves","isAvailableMove","checkUpdateBoard","indexX","indexY","onClickCell","XX","YY","BoardContainer","x","y","move","reverseCell","xx","yy","updateBoard","removeObservable","dataInput","slice","Array","isArray","item","entries","reduce","acc","_ref","_ref2","slicedToArray","i","j","k","reverseChessman","fill","evaluateMove","xMove","yMove","x1","y1","chessmanWhite","chessmanBlack","isFull","isMovable","isMove","timeout","clearTimeout","setTimeout","Header","Layout","Sider","Content","App","controller_ModalFormName","layout","width","background","controller_Drawer","margin","minWidth","minHeight","height","borderRadius","controller_ListRoom","controller_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static1/js/main.42db086c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function URL_add_parameter(param, value) {\n    let hash = {};\n    let url = window.location.href;\n\n    let parameters = url.split(/\\?|&/);\n\n    for (let i = 0; i < parameters.length; i++) {\n        if (!parameters[i]) continue;\n\n        let ary = parameters[i].split(\"=\");\n        hash[ary[0]] = ary[1];\n    }\n\n    hash[param] = value;\n\n    let list = [];\n    Object.keys(hash).forEach(function (key) {\n        if (hash[key]) {\n            list.push(key + \"=\" + hash[key]);\n        }\n    });\n\n    url = window.location.pathname + \"?\" + list.join(\"&\");\n    return url;\n}\n\nexport function reload_url(url) {\n    window.location.href = url;\n}\n\nexport function isEmpty(data) {\n    return data == undefined || data == null || data == \"\";\n}\n\n/**\n * Add props to view\n * @param {*} beforeProps\n * @param {*} props\n * @param {*} component\n * @param {*} keyComponent\n */\nexport function addPropsComponent(beforeProps, props = {}, component = null, keyComponent = null) {\n    if (component && keyComponent) {\n        component = React.cloneElement(component, props);\n        return {\n            ...beforeProps,\n            [keyComponent]: component\n        };\n    }\n    return beforeProps;\n}\n\n/**\n * remove property in props\n * @param {*} props\n * @param {*} key\n */\nexport function removeProp(props, key = null) {\n    let newProps = {};\n    if (key) {\n        Object.keys({...props}).forEach((keyProp) => {\n            if (keyProp !== key) {\n                newProps[keyProp] = props[keyProp];\n            }\n        });\n        return newProps;\n    }\n    return props;\n\n}\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function formatPagination(pagination) {\n    return {\n        pageSize: parseInt(pagination.per_page),\n        current: pagination.current_page,\n        total: pagination.total\n    };\n}\n\n/**\n * convert data sort of ant table with server sort\n * @param {*} sorter sorter of ant table\n * @param {*} key key of object need sort in server\n */\nexport function formatSortTable(sorter, key) {\n    if (key == sorter.field) {\n        if (sorter.order == \"ascend\") return \"asc\";\n        else {\n            return \"desc\";\n        }\n    }\n    return \"\";\n}\n\n/**\n *\n * @param location = props.location\n * @param key params\n * @returns {string || null} value params\n */\n\nexport function redirectURL(url) {\n    window.location.replace(url);\n}\n\n\nexport function getLastArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[arr.length - 1];\n    }\n    return null;\n}\n\nexport function getFirstArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[0];\n    }\n    return null;\n}\n\nexport function isEmptyArr(arr) {\n    if (arr && arr.length > 0) {\n        return false;\n    }\n    return true;\n}\n\nexport function isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));\n}\n\n/**\n *\n * @param array array need to check\n * @param item empty if use filter custom\n * @param key empty if use filter custom\n * @param filter filter custom\n * @returns {boolean}\n */\nexport function isExistArray(array, item, key, filter) {\n    if (!isEmptyArr(array) && !isEmpty(item) && !isEmpty(key)) {\n        if (filter) {\n            return array.filter(filter).length > 0;\n        } else {\n            return array.filter((dataItem) => dataItem[key] == item[key]).length > 0;\n        }\n    }\n\n    return false;\n}\n\nexport function convertUrlImageBackground(url) {\n    return `url(${url}) center center / cover`;\n}\n\nexport function clearArray(arr) {\n    while (arr.length) {\n        arr.pop();\n    }\n}\n\nexport function linkRoute(rootLink, data) {\n    let link = rootLink;\n    Object.keys(data).forEach((key) => {\n        const re = new RegExp(`:${key}`, 'g');\n        link = link.replace(re, data[key]);\n    });\n\n    return link;\n}\n\nexport function checkLink(routeLink, link) {\n    return routeLink == link;\n}\n\n/**\n * get value of object with string key\n * @param object example: {post: {creator: 'A'}}\n * @param strKey example: \"post.creator\"\n * @returns {*} example: A\n */\n\nexport function getValueObjectFromStringKey(object, strKey) {\n    let arrKey = strKey.split('.');\n    let objectData = {...object};\n    arrKey.forEach((key) => {\n        if (isEmpty(objectData)) return;\n\n        objectData = objectData[key];\n    });\n    return objectData;\n}\n\nexport function randomStr() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (let i = 0; i < 32; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n\n}","import {observable} from \"mobx\";\n\nexport default class UserStore {\n    @observable name = '';\n    @observable username = '';\n    @observable socket = '';\n    @observable status = '';\n    @observable chessman = '';\n\n    constructor(name, username, socket, status, chessman) {\n        this.name = name;\n        this.username = username;\n        this.socket = socket;\n        this.status = status;\n        this.chessman = chessman;\n    }\n}","import {observable} from \"mobx\";\n\nexport default class RoomStore {\n    @observable id = '';\n    @observable playerWhite = '';\n    @observable playerBlack = '';\n    @observable status = '';\n    @observable currentChessman = '';\n    @observable board = [];\n\n\n    constructor(id, playerWhite, playerBlack, status, board, chessman) {\n        this.id = id;\n        this.playerWhite = playerWhite;\n        this.playerBlack = playerBlack;\n        this.status = status;\n        this.board = board;\n        this.chessman = chessman;\n    }\n}\n","import {observable, action, computed} from \"mobx\";\nimport {isEmpty} from \"./helpers/utility\";\nimport UserStore from \"./model/user\";\nimport RoomStore from \"./model/room\";\n\nclass Store {\n    @observable visibleModalName = true;\n    @observable userStore = {};\n    @observable roomsStore = [];\n    @observable currentRoomId;\n    @observable status = \"choose room\";\n    @observable result;\n\n\n    @action\n    submitModalName = (data) => {\n        this.visibleModalName = false;\n        const user = data.user;\n        this.userStore = new UserStore(user.name, user.username, user.socket, user.status, user.chessman);\n        data.rooms.forEach((room) => {\n            this.roomsStore.push(new RoomStore(room.id, room.playerWhite, room.playerBlack, room.status, room.board, room.currentChessman))\n        })\n    }\n\n    @action\n    updateRoom = (roomData) => {\n        this.roomsStore = this.roomsStore.map((room) => {\n            if (room.id == roomData.id) {\n                Object.keys(roomData).map((key) => {\n                    room[key] = roomData[key];\n                })\n            }\n            return room;\n\n        });\n    }\n\n    @action\n    setCurrentRoom = (roomData) => {\n        this.status = \"playing\";\n        this.result = null;\n        this.currentRoomId = roomData.id;\n    };\n\n    @computed get getCurrentRoom() {\n        return this.roomsStore.filter(room => room.id == this.currentRoomId)[0];\n    }\n\n    @computed get yourTurn() {\n        const room = this.getCurrentRoom;\n        const player = this.player;\n        return player.chessman == room.currentChessman;\n    }\n\n    @computed get partner() {\n        const room = this.getCurrentRoom;\n        if (isEmpty(room)) return null;\n        return room.playerBlack && this.userStore.username == room.playerBlack.username ? room.playerWhite : room.playerBlack;\n    }\n\n    @computed get player() {\n        const room = this.getCurrentRoom;\n        if (isEmpty(room)) return null;\n        return room.playerWhite && this.userStore.username == room.playerWhite.username ? room.playerWhite : room.playerBlack;\n    }\n\n}\n\nexport default new Store();","import io from 'socket.io-client';\nimport {SOCKET_PORT, SOCKET_HOST} from '../constants/env';\n\nconst url = SOCKET_PORT ? `${SOCKET_HOST}:${SOCKET_PORT}` : '/';\n\nconst socket = io(url);\n\nexport default socket;","export default {\n    ServerListener: {\n        CONNECTION: 'connection',\n        LOG_IN: \"LOGIN\",\n        LOG_OUT: 'disconnect',\n        JOIN_ROOM: 'JOIN_ROOM',\n        READY_TO_PLAY: 'READY_TO_PLAY',\n        TICK: 'TICK',\n        FINISHED: 'FINISHED',\n\n    },\n    ClientListener: {\n        LOG_IN_SUCCESS: 'LOG_IN_SUCCESS',\n        JOINED_ROOM: 'JOINED_ROOM',\n        OUT_ROOM: 'OUT_ROOM',\n        UPDATE_ROOM: 'UPDATE_ROOM',\n        JOINED_GAME: 'JOINED_GAME',\n        UPDATE_BOARD: 'UPDATE_BOARD',\n        FINISH: 'FINISH',\n    },\n    Room: {\n        Board: {\n            ROW: 8,\n            COL: 8,\n            Cell: {\n                EMPTY: null,\n                WHITE: 1,\n                BLACK: 2\n            }\n        },\n        Status: {\n            EMPTY: 0,\n            AVAILABLE: 1,\n            PLAYING: 2\n        }\n    },\n    Client: {\n        Status: {\n            ONLINE: 'ONLINE',\n            IN_ROOM: 'IN_ROOM',\n            PLAYING: 'PLAYING'\n        },\n        GameResult: {\n            WIN: 'WIN',\n            LOSE: 'LOSE'\n        }\n    },\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"antd\";\n\nclass CustomForm extends Component {\n  getChildContext() {\n    return {\n      form: this.props.form\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.onSubmit(values);\n      }\n    });\n  };\n\n  getForm = () => {\n    return this.props.form;\n  };\n\n  render() {\n    return <Form onSubmit={this.handleSubmit}>{this.props.children}</Form>;\n  }\n}\n\nCustomForm.childContextTypes = {\n  form: PropTypes.object.isRequired\n};\n\nCustomForm.propTypes = {\n  className: PropTypes.string,\n  rules: PropTypes.array,\n  onSubmit: PropTypes.func\n};\n\nexport default Form.create()(CustomForm);\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Form} from \"antd\";\nimport {removeProp} from \"../../helpers/utility\";\n\nconst generatorFormItem = () => {\n    return WrappedComponent => {\n        class FormItem extends Component {\n            static contextTypes = {\n                form: PropTypes.object.isRequired\n            };\n\n            constructor(props) {\n                super(props);\n            }\n\n            render() {\n                const {getFieldDecorator} = this.context.form;\n                const {onChange, defaultValue, rules, name} = this.props;\n\n                const options = {};\n\n                if (rules) {\n                    options.rules = rules;\n                }\n\n                if (onChange) {\n                    options.onChange = onChange;\n                }\n\n                if (defaultValue) {\n                    options.initialValue = defaultValue;\n                }\n\n                const props = removeProp(this.props, 'defaultValue');\n\n                return (\n                    <Form.Item>\n                        {getFieldDecorator(name, options)(\n                            <WrappedComponent {...props}>\n                                {this.props.children}\n                            </WrappedComponent>\n                        )}\n                    </Form.Item>\n                );\n            }\n        }\n\n        return FormItem;\n    };\n};\n\nexport default generatorFormItem;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport generatorFormItem from \"../HOC/generatorFormItem\";\nimport {Input} from \"antd\";\nimport {addPropsComponent, removeProp} from \"../../helpers/utility\";\n\nconst InputComponent = generatorFormItem()(Input);\n\nexport default class FormInput extends Component {\n    static propTypes = {\n        rules: PropTypes.array,\n        name: PropTypes.string.isRequired,\n        defaultValue: PropTypes.string,\n        suffixClear: PropTypes.bool //check clear value of input when click suffix\n    };\n\n    static contextTypes = {\n        form: PropTypes.object.isRequired\n    };\n\n    getValue = () => {\n        return this.context.form.getFieldValue(this.props.name);\n    };\n\n    setValue = value => {\n        this.context.form.setFieldsValue({[this.props.name]: value});\n    };\n\n    //event clear value input\n    clear = () => {\n        this.setValue(\"\");\n    };\n\n    //add suffix clear when click suffix\n    addSuffixClearValueToProps = beforeProps => {\n        const value = this.getValue() === undefined ? beforeProps.defaultValue : this.getValue();\n\n        beforeProps = removeProp(beforeProps, \"suffixClear\");\n\n        if (value) {\n            let props = {\n                onClick: () => {\n                    this.clear();\n                }\n            };\n\n            // add props to suffix\n            return addPropsComponent(beforeProps, props, this.props.suffix, \"suffix\");\n        } else {\n            //remove suffix in props\n            return removeProp(beforeProps, \"suffix\");\n        }\n    };\n\n    render() {\n        const {suffixClear, suffix} = this.props;\n        let props = {...this.props};\n\n        if (suffixClear && suffix) {\n            props = this.addSuffixClearValueToProps(props);\n        }\n\n        return <InputComponent {...props} />;\n    }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Form } from \"antd\";\n\nexport default class FormButton extends Component {\n  static propTypes = {\n    type: PropTypes.string,\n    htmlType: PropTypes.string,\n    size: PropTypes.string,\n    className: PropTypes.string\n  };\n\n  render() {\n    return (\n      <Form.Item>\n        <Button {...this.props}>{this.props.children}</Button>\n      </Form.Item>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {Modal} from \"antd\";\nimport Form from \"./common/Form\";\nimport FormInput from \"./common/FormInput\";\nimport FormButton from \"./common/FormButton\";\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\n\n@observer\nclass ModalFormNameComponent extends Component {\n\n    render() {\n        return (\n            <Modal\n                title=\"Điền tên của bạn\"\n                visible={store.visibleModalName}\n                footer={null}\n                closable={false}\n            >\n                <Form onSubmit={this.props.submitModalName}>\n                    <FormInput\n                        name=\"name\"\n                        suffixClear\n                        placeholder=\"Nhập tên của bạn\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Vui lòng nhập tên của bạn!\"\n                            }\n                        ]}\n\n                    />\n                    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                        <FormButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                        >\n                            Đăng nhập\n                        </FormButton>\n                    </div>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default ModalFormNameComponent;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport ModalFormNameComponent from \"../view/ModalFormName\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n@observer\nclass ModalFormNameContainer extends Component {\n\n    submitModalName = (data) => {\n        socket.emit(ServerListener.LOG_IN, data);\n        socket.on(ClientListener.LOG_IN_SUCCESS, (dataSocket) => {\n            store.submitModalName(dataSocket);\n        });\n\n    };\n\n    render() {\n        return (\n            <ModalFormNameComponent\n                submitModalName={this.submitModalName}\n            />\n        );\n    }\n}\n\nexport default ModalFormNameContainer;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {Avatar} from 'antd';\nimport constant from \"../constants\";\n\nconst RoomConstant = constant.Room;\n\n@observer\nclass DrawerComponent extends Component {\n    render() {\n        const userStore = store.userStore;\n        return (\n            <div style={{\n                padding: '20px 5px',\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'column'\n            }}>\n                <Avatar size={100} icon=\"user\"/>\n                <div style={{marginTop: 20}}>\n                    Xin chào,\n                </div>\n                <div style={{fontWeight: 'bold'}}>{userStore.name}</div>\n                <div style={{color: '#989898'}}>{userStore.username}</div>\n                <div style={{marginBottom: '20px'}}/>\n                {\n                    store.player && store.partner &&\n                    <div className=\"board-score\">\n                        {\n                            store.player &&\n                            <div style={{marginBottom: '30px'}}>\n                                <div className=\"name\">Bạn</div>\n                                <div className=\"container-score\">\n                                    <div\n                                        className={store.player.chessman == RoomConstant.Board.Cell.WHITE ? 'dot-white' : 'dot-black'}/>\n\n                                    <div className=\"score\">\n                                        x {this.props.totalChessman(store.getCurrentRoom.board, store.player.chessman)}\n                                    </div>\n                                </div>\n\n                            </div>\n                        }\n                        {\n                            store.partner &&\n                            <div style={{marginBottom: '30px'}}>\n                                <div className=\"name\">{store.partner.name}</div>\n                                <div style={{color: '#ececec', textAlign: 'center'}}>{store.partner.username}</div>\n                                <div className=\"container-score\">\n                                    <div\n                                        className={store.partner.chessman == RoomConstant.Board.Cell.WHITE ? 'dot-white' : 'dot-black'}/>\n                                    <div className=\"score\">\n                                        x {this.props.totalChessman(store.getCurrentRoom.board, store.partner.chessman)}\n                                    </div>\n                                </div>\n\n                            </div>\n                        }\n                        {store.yourTurn ? <div className=\"name\">Lượt bạn</div> :\n                            <div className=\"name\">Lượt đối thủ</div>}\n                    </div>\n                }\n\n\n            </div>\n        );\n    }\n}\n\nexport default DrawerComponent;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport DrawerComponent from \"../view/Drawer\";\n\n@observer\nclass DrawerContainer extends Component {\n\n    totalChessman(board, chessman) {\n        let count = 0;\n        board.forEach((row) => {\n            row.forEach((cell) => {\n                if (cell == chessman) {\n                    count++;\n                }\n            })\n        });\n        return count;\n    }\n\n    render() {\n        return (\n            <DrawerComponent totalChessman={this.totalChessman}/>\n        );\n    }\n}\n\nexport default DrawerContainer;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {Col, Row} from 'antd';\n\n@observer\nclass ListRoomComponent extends Component {\n    renderRoom = (room, index) => {\n        const numberPlayer = this.props.countPlayer(room);\n        return (\n            <Col span={4} key={index}>\n                <div className=\"room\" onClick={() => {\n                    if (room.status != 2) this.props.joinRoom(room)\n                }}>\n                    <div className={\"room-empty \" + `room-${room.status}-user`}>\n                        <div className=\"text\">\n                            {numberPlayer}/2\n                        </div>\n                    </div>\n                    <div className=\"room-name\">\n                        Phòng {room.id}\n                    </div>\n                </div>\n\n            </Col>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n\n                <Row gutter={24}>\n                    {\n                        store.roomsStore.map((room, index) => {\n                            return this.renderRoom(room, index);\n                        })\n                    }\n                </Row>\n            </div>\n\n        );\n    }\n}\n\nexport default ListRoomComponent;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\nimport ListRoomComponent from \"../view/ListRoom\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n@observer\nclass ListRoomContainer extends Component {\n\n    componentWillMount() {\n        socket.on(ClientListener.UPDATE_ROOM, (room) => {\n            store.updateRoom(room);\n        });\n        socket.on(ClientListener.JOINED_ROOM, (room) => {\n            store.updateRoom(room);\n            store.setCurrentRoom(room);\n        });\n    }\n\n    joinRoom = (room) => {\n        socket.emit(ServerListener.JOIN_ROOM, {roomId: room.id});\n    };\n\n    countPlayer = (room) => {\n        let count = 0;\n        if (!isEmpty(room.playerWhite)) {\n            count++;\n        }\n        if (!isEmpty(room.playerBlack)) {\n            count++;\n        }\n        return count;\n    };\n\n    render() {\n        return (\n            <ListRoomComponent\n                joinRoom={this.joinRoom}\n                countPlayer={this.countPlayer}\n            />\n\n        );\n    }\n}\n\nexport default ListRoomContainer;\n","function isUndefined(data) {\n    return data === undefined;\n}\n\nfunction isNull(data) {\n    return data == null;\n}\n\nfunction isNotValue(data) {\n    return data == \"\";\n}\n\nfunction isEmpty(data) {\n    return isUndefined(data) || isNull(data) || isNotValue(data);\n}\n\nexport function removeObservable(dataInput) {\n\n    if (isUndefined(dataInput)) return undefined;\n\n    if (isNull(dataInput)) return null;\n\n    if (dataInput.slice && Array.isArray(dataInput.slice())) {\n        return dataInput.map((item) => {\n            return removeObservable(item);\n        });\n    }\n\n    if ((typeof dataInput) === 'object') {\n        return Object.entries(dataInput).reduce((acc, [key, value]) => {\n            return {...acc, [key]: removeObservable(value)};\n        }, {});\n    }\n\n    return dataInput;\n}","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport constant from \"../constants\";\nimport {Button, Modal} from \"antd\";\n\nconst ClientConstant = constant.Client;\nconst RoomConstant = constant.Room;\n\n\n@observer\nclass BoardComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderWin = () => {\n        return (\n            <Modal\n                title=\"Kết quả trận đấu\"\n                visible={this.props.isFullBoard(store.getCurrentRoom.board) || store.result}\n                // visible={true}\n                footer={null}\n                closable={true}\n                onCancel={this.props.onFinish}\n            >\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center'}}>\n                    <div style={{fontSize: '30px', fontWeight: 'bold'}}>\n                        {\n                            store.result == ClientConstant.GameResult.WIN || this.props.checkWin(store.getCurrentRoom.board) == store.player.chessman ? \"Bạn thắng\" :\n                                this.props.checkWin(store.getCurrentRoom.board) == store.partner.chessman ? store.partner.name + \" thắng\" : \"Hòa\"\n                        }\n                    </div>\n                    <Button onClick={this.props.onFinish}>Thoát</Button>\n                </div>\n            </Modal>\n        )\n    };\n\n    renderBoard = () => {\n        let fences = this.props.createFences();\n        const moves = this.props.isAvailableMove(fences, store.getCurrentRoom.board, store.player.chessman);\n\n        this.props.checkUpdateBoard(fences);\n\n        return (\n            <div className=\"board-game\">\n                {\n                    store.getCurrentRoom.board.map((row, indexX) => {\n                        return (\n                            <div className=\"board-row\" key={indexX}>\n                                {\n                                    row.map((cell, indexY) => {\n                                        return (\n                                            <div\n                                                className={\"cell-game \" + (!moves[indexX][indexY] || !store.yourTurn ? \"not-allowed-cell\" : \"\")}\n                                                key={indexY}\n                                                onClick={() => {\n                                                    if (moves[indexX][indexY] && store.yourTurn) {\n                                                        this.props.onClickCell(indexX, indexY, moves[indexX][indexY]);\n                                                    }\n                                                }}>\n                                                {\n                                                    cell == RoomConstant.Board.Cell.BLACK ?\n                                                        <div className=\"dot-black\"/> :\n                                                        cell == RoomConstant.Board.Cell.WHITE ?\n                                                            <div className=\"dot-white\"/> :\n                                                            <div\n                                                                className={(moves[indexX][indexY] && store.yourTurn ?\n                                                                    (store.player.chessman == RoomConstant.Board.Cell.BLACK ?\n                                                                        \"hover-black\" : \"hover-white\") : \"not-allowed\")}/>\n                                                }\n\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        )\n\n                    })\n                }\n                {\n                    this.renderWin()\n                }\n            </div>\n        )\n    };\n\n    render() {\n        const room = store.getCurrentRoom;\n\n        if (room.status == RoomConstant.Status.PLAYING) {\n            return this.renderBoard();\n        }\n\n        return <div className=\"waiting-partner\">Đang đợi đối thủ...</div>;\n    }\n}\n\nexport default BoardComponent;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {removeObservable} from \"../helpers/entity/mobx\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\nimport BoardComponent from \"../view/Board\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\nconst RoomConstant = constant.Room;\n\nconst XX = [-1, -1, -1, 1, 1, 1, 0, 0];\nconst YY = [-1, 0, 1, -1, 0, 1, -1, 1];\n\n@observer\nclass BoardContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        socket.on(ClientListener.JOINED_GAME, (room) => {\n            store.updateRoom(room);\n        });\n\n        socket.on(ClientListener.UPDATE_BOARD, (room) => {\n            store.updateRoom(room);\n        });\n\n        socket.on(ClientListener.FINISH, (data) => {\n            store.result = data.result;\n        });\n    }\n\n\n    onClickCell = (x, y, move) => {\n        store.getCurrentRoom.board[x][y] = store.player.chessman;\n\n        move.forEach((data) => {\n            this.reverseCell(store.getCurrentRoom.board, store.player.chessman, store.partner.chessman, x, y, data.xx, data.yy);\n        });\n\n        this.updateBoard();\n    };\n\n    updateBoard = () => {\n        socket.emit(ServerListener.TICK, store.getCurrentRoom.board);\n    };\n\n    createFences = () => {\n        let fences = removeObservable(store.getCurrentRoom.board);\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == 1 || fences[i][j] == 2) {\n                    for (let k = 0; k < 8; k++) {\n                        if (0 <= i + XX[k] && i + XX[k] < 8 && 0 <= j + YY[k] && j + YY[k] < 8 && !fences[i + XX[k]][j + YY[k]]) {\n                            fences[i + XX[k]][j + YY[k]] = -1;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        return fences;\n    }\n\n    isAvailableMove = (fences, board, chessman) => {\n        let moves = new Array(8).fill(null).map(() => new Array(8));\n        let reverseChessman;\n        if (chessman == 1) {\n            reverseChessman = 2;\n        } else {\n            reverseChessman = 1;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == -1) {\n                    for (let k = 0; k < 8; k++) {\n                        let isEvaluateMove = this.evaluateMove(board, chessman, reverseChessman, i, j, XX[k], YY[k]);\n                        if (isEvaluateMove) {\n                            fences[i][j] = -2;\n                            if (moves[i][j] == undefined) {\n                                moves[i][j] = [];\n                            }\n                            moves[i][j].push({xx: XX[k], yy: YY[k]});\n                        }\n                    }\n                }\n            }\n        }\n        return moves;\n    }\n\n    evaluateMove = (board, chessman, reverseChessman, x, y, xMove, yMove) => {\n        let count = 0;\n        let x1 = x + xMove;\n        let y1 = y + yMove;\n        while (true) {\n            if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n                return false;\n            }\n\n            if (board[x1][y1] == reverseChessman) {\n                count++;\n            } else {\n                if (board[x1][y1] == chessman) {\n                    break;\n                } else {\n                    return false;\n                }\n\n            }\n            x1 = x1 + xMove;\n            y1 = y1 + yMove;\n        }\n\n        if (count > 0) {\n            return true;\n        }\n\n        return false;\n\n    }\n\n    reverseCell = (board, chessman, reverseChessman, x, y, xMove, yMove) => {\n        let x1 = x + xMove;\n        let y1 = y + yMove;\n        while (true) {\n\n            if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n                return;\n            }\n\n            if (board[x1][y1] == reverseChessman) {\n                board[x1][y1] = chessman;\n            } else {\n                if (board[x1][y1] == chessman) {\n                    break;\n                } else {\n                    return;\n                }\n\n            }\n            x1 = x1 + xMove;\n            y1 = y1 + yMove;\n        }\n    }\n\n    checkWin = (board) => {\n        let chessmanWhite = 0;\n        let chessmanBlack = 0;\n        board.forEach((row) => {\n            row.forEach((cell) => {\n                if (cell == RoomConstant.Board.Cell.WHITE) {\n                    chessmanWhite++;\n                }\n                if (cell == RoomConstant.Board.Cell.BLACK) {\n                    chessmanBlack++;\n                }\n            })\n        });\n        if (chessmanBlack > chessmanWhite) {\n            return RoomConstant.Board.Cell.BLACK;\n        }\n        if (chessmanBlack < chessmanWhite) {\n            return RoomConstant.Board.Cell.WHITE;\n        }\n        return 0;\n    }\n\n    isFullBoard = (board) => {\n        let isFull = true;\n        board.forEach((row) => {\n            row.forEach((cell) => {\n                if (isEmpty(cell)) {\n                    isFull = false;\n                }\n\n            })\n        });\n\n        return isFull;\n    }\n\n    isMovable = (fences) => {\n        let isMove = false;\n        fences.forEach((row) => {\n            row.forEach((cell) => {\n                if (cell == -2) {\n                    isMove = true;\n                }\n            })\n        });\n\n        return isMove;\n    }\n\n\n    checkUpdateBoard = (fences) => {\n        if (this.isFullBoard(store.getCurrentRoom.board)) return;\n\n        if (this.timeout != null) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => {\n            if (!this.isMovable(fences) && store.yourTurn) {\n                this.updateBoard();\n            }\n        }, 500);\n    };\n\n    onFinish = () => {\n        socket.emit(ServerListener.FINISHED);\n        store.status = \"choose room\";\n    };\n\n\n    render() {\n\n        return (\n            <BoardComponent\n                isFullBoard={this.isFullBoard}\n                checkWin={this.checkWin}\n                createFences={this.createFences}\n                isAvailableMove={this.isAvailableMove}\n                checkUpdateBoard={this.checkUpdateBoard}\n                onClickCell={this.onClickCell}\n                onFinish={this.onFinish}\n            />\n        )\n    }\n}\n\nexport default BoardContainer;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport store from \"./Store\";\nimport {Layout} from 'antd';\n\nimport ModalFormNameContainer from \"./controller/ModalFormName\";\nimport DrawerContainer from \"./controller/Drawer\";\nimport ListRoomContainer from \"./controller/ListRoom\";\nimport BoardContainer from \"./controller/Board\";\n\nconst {Header, Sider, Content} = Layout;\n\n@observer\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <ModalFormNameContainer/>\n                <Layout className=\"layout\">\n                    <Header>\n                        <div style={{color: '#fff', fontSize: '22px', fontWeight: 'bold', textAlign: 'center'}}>\n                            {store.status == \"choose room\" ? \"Chọn phòng\" : \"Chơi\"}\n                        </div>\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{background: '#fff'}}>\n                            <DrawerContainer/>\n                        </Sider>\n                        <Content\n                            style={{\n                                background: '#e2e2e2',\n                                padding: 24,\n                                margin: 0,\n                                minWidth: '800px',\n                                minHeight: 'calc(100vh - 64px)'\n                            }}>\n                            <div style={{\n                                background: '#fff',\n                                width: '100%',\n                                height: '100%',\n                                padding: 24,\n                                borderRadius: '10px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center'\n                            }}>\n                                {\n                                    store.status == \"choose room\" ? <ListRoomContainer/> : <BoardContainer/>\n                                }\n                            </div>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a services worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our services worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a services worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // services worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a services ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register services worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous services worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during services worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the services worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure services worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No services worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about services workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}