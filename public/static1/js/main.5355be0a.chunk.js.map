{"version":3,"sources":["Store.js","component/common/Form.js","helpers/utility.js","component/HOC/generatorFormItem.js","component/common/FormInput.js","component/common/FormButton.js","services/socketio.js","constants/index.js","component/ModalFormName.js","component/ListRoom.js","helpers/entity/mobx.js","component/Board.js","App.js","serviceWorker.js","index.js"],"names":["UserStore","name","username","socket","status","chessman","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","observable","RoomStore","id","playerWhite","playerBlack","board","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","src_Store","_this","roomsStore","filter","room","currentRoomId","getCurrentRoom","player","currentChessman","userStore","Array","fill","map","action","data","_this2","visibleModalName","user","rooms","forEach","push","roomData","console","log","_this3","keys","key","_this4","computed","CustomForm","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","onSubmit","getForm","react_default","a","createElement","es_form","children","Component","childContextTypes","PropTypes","object","isRequired","Form","create","isEmpty","undefined","removeProp","arguments","length","newProps","objectSpread","keyProp","generatorFormItem","WrappedComponent","FormItem","_Component","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","value","getFieldDecorator","context","_this$props","onChange","defaultValue","rules","options","initialValue","Item","contextTypes","InputComponent","Input","FormInput","getValue","getFieldValue","setValue","setFieldsValue","defineProperty","clear","addSuffixClearValueToProps","beforeProps","component","keyComponent","React","cloneElement","addPropsComponent","onClick","suffix","suffixClear","FormButton","es_button","io","constants","CONNECTION","LOG_IN","LOG_OUT","JOIN_ROOM","READY_TO_PLAY","TICK","LOG_IN_SUCCESS","JOINED_ROOM","OUT_ROOM","UPDATE_ROOM","JOINED_GAME","UPDATE_BOARD","FINISH","Board","ROW","COL","Cell","EMPTY","WHITE","BLACK","Status","AVAILABLE","PLAYING","ClientListener","constant","ServerListener","ModalFormName","observer","submitModalName","emit","on","dataSocket","store","modal","title","visible","footer","closable","FormInput_FormInput","placeholder","required","message","style","display","justifyContent","alignItems","FormButton_FormButton","type","htmlType","ListRoom","joinRoom","roomId","countPlayer","count","renderRoom","numberPlayer","col","span","className","concat","updateRoom","setCurrentRoom","es_row","gutter","index","isUndefined","isNull","RoomConstant","XX","YY","evaluateMove","reverseChessman","x","y","xMove","yMove","x1","y1","onClickCell","move","reverseCell","partner","xx","yy","createFences","fences","removeObservable","dataInput","slice","isArray","item","entries","reduce","acc","_ref","_ref2","slicedToArray","i","j","k","isAvailableMove","moves","renderBoard","row","indexX","cell","indexY","yourTurn","Header","Layout","Sider","Content","App","component_ModalFormName","layout","color","fontSize","fontWeight","textAlign","width","background","padding","flexDirection","avatar","size","icon","marginTop","divider","margin","minWidth","minHeight","height","borderRadius","component_ListRoom","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static1/js/main.5355be0a.chunk.js","sourcesContent":["import {observable, action, computed} from \"mobx\";\n\nclass UserStore {\n    @observable name = '';\n    @observable username = '';\n    @observable socket = '';\n    @observable status = '';\n    @observable chessman = '';\n\n    constructor(name, username, socket, status, chessman) {\n        this.name = name;\n        this.username = username;\n        this.socket = socket;\n        this.status = status;\n        this.chessman = chessman;\n    }\n}\n\nclass RoomStore {\n    @observable id = '';\n    @observable playerWhite = '';\n    @observable playerBlack = '';\n    @observable status = '';\n    @observable currentChessman = '';\n    @observable board = [];\n\n    constructor(id, playerWhite, playerBlack, status, board, chessman) {\n        this.id = id;\n        this.playerWhite = playerWhite;\n        this.playerBlack = playerBlack;\n        this.status = status;\n        this.board = board;\n        this.chessman = chessman;\n    }\n}\n\n\nclass Store {\n    @observable visibleModalName = true;\n    @observable userStore = {};\n    @observable roomsStore = [];\n    @observable currentRoomId;\n\n    @observable status = \"choose room\";\n\n    @observable board = (new Array(8).fill(null)).map(() => new Array(8).fill(null));\n\n    @action\n    submitModalName = (data) => {\n        this.visibleModalName = false;\n        const user = data.user;\n        this.userStore = new UserStore(user.name, user.username, user.socket, user.status, user.chessman);\n        data.rooms.forEach((room) => {\n            this.roomsStore.push(new RoomStore(room.id, room.playerWhite, room.playerBlack, room.status, room.board, room.currentChessman))\n        })\n    }\n\n    @action\n    updateRoom = (roomData) => {\n        console.log(roomData);\n        this.roomsStore = this.roomsStore.map((room) => {\n            if (room.id == roomData.id) {\n                Object.keys(roomData).map((key) => {\n                    room[key] = roomData[key];\n                })\n            }\n            return room;\n\n        });\n    }\n\n    @action\n    setCurrentRoom = (roomData) => {\n        this.status = \"playing\";\n        this.currentRoomId = roomData.id;\n    };\n\n    @computed get getCurrentRoom() {\n        return this.roomsStore.filter(room => room.id == this.currentRoomId)[0];\n    }\n\n    @computed get yourTurn() {\n        const room = this.getCurrentRoom;\n        const player = this.player;\n        return player.chessman == room.currentChessman;\n    }\n\n    @computed get partner() {\n        const room = this.getCurrentRoom;\n        return room.playerBlack && this.userStore.username == room.playerBlack.username ? room.playerWhite : room.playerBlack;\n    }\n\n    @computed get player() {\n        const room = this.getCurrentRoom;\n        return room.playerWhite && this.userStore.username == room.playerWhite.username ? room.playerWhite : room.playerBlack;\n    }\n\n}\n\nexport default new Store();","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"antd\";\n\nclass CustomForm extends Component {\n  getChildContext() {\n    return {\n      form: this.props.form\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.onSubmit(values);\n      }\n    });\n  };\n\n  getForm = () => {\n    return this.props.form;\n  };\n\n  render() {\n    return <Form onSubmit={this.handleSubmit}>{this.props.children}</Form>;\n  }\n}\n\nCustomForm.childContextTypes = {\n  form: PropTypes.object.isRequired\n};\n\nCustomForm.propTypes = {\n  className: PropTypes.string,\n  rules: PropTypes.array,\n  onSubmit: PropTypes.func\n};\n\nexport default Form.create()(CustomForm);\n","import React from \"react\";\n\nexport function URL_add_parameter(param, value) {\n    let hash = {};\n    let url = window.location.href;\n\n    let parameters = url.split(/\\?|&/);\n\n    for (let i = 0; i < parameters.length; i++) {\n        if (!parameters[i]) continue;\n\n        let ary = parameters[i].split(\"=\");\n        hash[ary[0]] = ary[1];\n    }\n\n    hash[param] = value;\n\n    let list = [];\n    Object.keys(hash).forEach(function (key) {\n        if (hash[key]) {\n            list.push(key + \"=\" + hash[key]);\n        }\n    });\n\n    url = window.location.pathname + \"?\" + list.join(\"&\");\n    return url;\n}\n\nexport function reload_url(url) {\n    window.location.href = url;\n}\n\nexport function isEmpty(data) {\n    return data == undefined || data == null || data == \"\";\n}\n\n/**\n * Add props to component\n * @param {*} beforeProps\n * @param {*} props\n * @param {*} component\n * @param {*} keyComponent\n */\nexport function addPropsComponent(beforeProps, props = {}, component = null, keyComponent = null) {\n    if (component && keyComponent) {\n        component = React.cloneElement(component, props);\n        return {\n            ...beforeProps,\n            [keyComponent]: component\n        };\n    }\n    return beforeProps;\n}\n\n/**\n * remove property in props\n * @param {*} props\n * @param {*} key\n */\nexport function removeProp(props, key = null) {\n    let newProps = {};\n    if (key) {\n        Object.keys({...props}).forEach((keyProp) => {\n            if (keyProp !== key) {\n                newProps[keyProp] = props[keyProp];\n            }\n        });\n        return newProps;\n    }\n    return props;\n\n}\n\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function formatPagination(pagination) {\n    return {\n        pageSize: parseInt(pagination.per_page),\n        current: pagination.current_page,\n        total: pagination.total\n    };\n}\n\n/**\n * convert data sort of ant table with server sort\n * @param {*} sorter sorter of ant table\n * @param {*} key key of object need sort in server\n */\nexport function formatSortTable(sorter, key) {\n    if (key == sorter.field) {\n        if (sorter.order == \"ascend\") return \"asc\";\n        else {\n            return \"desc\";\n        }\n    }\n    return \"\";\n}\n\n/**\n *\n * @param location = props.location\n * @param key params\n * @returns {string || null} value params\n */\n\nexport function redirectURL(url) {\n    window.location.replace(url);\n}\n\n\nexport function getLastArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[arr.length - 1];\n    }\n    return null;\n}\n\nexport function getFirstArr(arr) {\n    if (!isEmptyArr(arr)) {\n        return arr[0];\n    }\n    return null;\n}\n\nexport function isEmptyArr(arr) {\n    if (arr && arr.length > 0) {\n        return false;\n    }\n    return true;\n}\n\nexport function isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));\n}\n\n/**\n *\n * @param array array need to check\n * @param item empty if use filter custom\n * @param key empty if use filter custom\n * @param filter filter custom\n * @returns {boolean}\n */\nexport function isExistArray(array, item, key, filter) {\n    if (!isEmptyArr(array) && !isEmpty(item) && !isEmpty(key)) {\n        if (filter) {\n            return array.filter(filter).length > 0;\n        } else {\n            return array.filter((dataItem) => dataItem[key] == item[key]).length > 0;\n        }\n    }\n\n    return false;\n}\n\nexport function convertUrlImageBackground(url) {\n    return `url(${url}) center center / cover`;\n}\n\nexport function clearArray(arr) {\n    while (arr.length) {\n        arr.pop();\n    }\n}\n\nexport function linkRoute(rootLink, data) {\n    let link = rootLink;\n    Object.keys(data).forEach((key) => {\n        const re = new RegExp(`:${key}`, 'g');\n        link = link.replace(re, data[key]);\n    });\n\n    return link;\n}\n\nexport function checkLink(routeLink, link) {\n    return routeLink == link;\n}\n\n/**\n * get value of object with string key\n * @param object example: {post: {creator: 'A'}}\n * @param strKey example: \"post.creator\"\n * @returns {*} example: A\n */\n\nexport function getValueObjectFromStringKey(object, strKey) {\n    let arrKey = strKey.split('.');\n    let objectData = {...object};\n    arrKey.forEach((key) => {\n        if (isEmpty(objectData)) return;\n\n        objectData = objectData[key];\n    });\n    return objectData;\n}\n\nexport function randomStr() {\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (let i = 0; i < 32; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n\n}","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Form} from \"antd\";\nimport {removeProp} from \"../../helpers/utility\";\n\nconst generatorFormItem = () => {\n    return WrappedComponent => {\n        class FormItem extends Component {\n            static contextTypes = {\n                form: PropTypes.object.isRequired\n            };\n\n            constructor(props) {\n                super(props);\n            }\n\n            render() {\n                const {getFieldDecorator} = this.context.form;\n                const {onChange, defaultValue, rules, name} = this.props;\n\n                const options = {};\n\n                if (rules) {\n                    options.rules = rules;\n                }\n\n                if (onChange) {\n                    options.onChange = onChange;\n                }\n\n                if (defaultValue) {\n                    options.initialValue = defaultValue;\n                }\n\n                const props = removeProp(this.props, 'defaultValue');\n\n                return (\n                    <Form.Item>\n                        {getFieldDecorator(name, options)(\n                            <WrappedComponent {...props}>\n                                {this.props.children}\n                            </WrappedComponent>\n                        )}\n                    </Form.Item>\n                );\n            }\n        }\n\n        return FormItem;\n    };\n};\n\nexport default generatorFormItem;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport generatorFormItem from \"../HOC/generatorFormItem\";\nimport {Input} from \"antd\";\nimport {addPropsComponent, removeProp} from \"../../helpers/utility\";\n\nconst InputComponent = generatorFormItem()(Input);\n\nexport default class FormInput extends Component {\n    static propTypes = {\n        rules: PropTypes.array,\n        name: PropTypes.string.isRequired,\n        defaultValue: PropTypes.string,\n        suffixClear: PropTypes.bool //check clear value of input when click suffix\n    };\n\n    static contextTypes = {\n        form: PropTypes.object.isRequired\n    };\n\n    getValue = () => {\n        return this.context.form.getFieldValue(this.props.name);\n    };\n\n    setValue = value => {\n        this.context.form.setFieldsValue({[this.props.name]: value});\n    };\n\n    //event clear value input\n    clear = () => {\n        this.setValue(\"\");\n    };\n\n    //add suffix clear when click suffix\n    addSuffixClearValueToProps = beforeProps => {\n        const value = this.getValue() === undefined ? beforeProps.defaultValue : this.getValue();\n\n        beforeProps = removeProp(beforeProps, \"suffixClear\");\n\n        if (value) {\n            let props = {\n                onClick: () => {\n                    this.clear();\n                }\n            };\n\n            // add props to suffix\n            return addPropsComponent(beforeProps, props, this.props.suffix, \"suffix\");\n        } else {\n            //remove suffix in props\n            return removeProp(beforeProps, \"suffix\");\n        }\n    };\n\n    render() {\n        const {suffixClear, suffix} = this.props;\n        let props = {...this.props};\n\n        if (suffixClear && suffix) {\n            props = this.addSuffixClearValueToProps(props);\n        }\n\n        return <InputComponent {...props} />;\n    }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Form } from \"antd\";\n\nexport default class FormButton extends Component {\n  static propTypes = {\n    type: PropTypes.string,\n    htmlType: PropTypes.string,\n    size: PropTypes.string,\n    className: PropTypes.string\n  };\n\n  render() {\n    return (\n      <Form.Item>\n        <Button {...this.props}>{this.props.children}</Button>\n      </Form.Item>\n    );\n  }\n}\n","import io from 'socket.io-client';\nimport {SOCKET_PORT, SOCKET_HOST} from '../constants/env';\n\nconst url = SOCKET_PORT ? `${SOCKET_HOST}:${SOCKET_PORT}` : '/';\n\nconst socket = io(url);\n\nexport default socket;","export default {\n    ServerListener: {\n        CONNECTION: 'connection',\n        LOG_IN: \"LOGIN\",\n        LOG_OUT: 'disconnect',\n        JOIN_ROOM: 'JOIN_ROOM',\n        READY_TO_PLAY: 'READY_TO_PLAY',\n        TICK: 'TICK',\n    },\n    ClientListener: {\n        LOG_IN_SUCCESS: 'LOG_IN_SUCCESS',\n        JOINED_ROOM: 'JOINED_ROOM',\n        OUT_ROOM: 'OUT_ROOM',\n        UPDATE_ROOM: 'UPDATE_ROOM',\n        JOINED_GAME: 'JOINED_GAME',\n        UPDATE_BOARD: 'UPDATE_BOARD',\n        FINISH: 'FINISH'\n    },\n    Room: {\n        Board: {\n            ROW: 8,\n            COL: 8,\n            Cell: {\n                EMPTY: null,\n                WHITE: 1,\n                BLACK: 2\n            }\n        },\n        Status: {\n            EMPTY: 0,\n            AVAILABLE: 1,\n            PLAYING: 2\n        }\n    },\n    Client: {\n        Status: {\n            ONLINE: 'ONLINE',\n            IN_ROOM: 'IN_ROOM',\n            PLAYING: 'PLAYING'\n        },\n        GameResult: {\n            WIN: 'WIN',\n            LOSE: 'LOSE'\n        }\n    },\n}","import React, {Component} from 'react';\nimport {Modal} from \"antd\";\nimport Form from \"./common/Form\";\nimport FormInput from \"./common/FormInput\";\nimport FormButton from \"./common/FormButton\";\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n@observer\nclass ModalFormName extends Component {\n\n    submitModalName = (data) => {\n        socket.emit(ServerListener.LOG_IN, data);\n        socket.on(ClientListener.LOG_IN_SUCCESS, (dataSocket) => {\n            store.submitModalName(dataSocket);\n        });\n\n    };\n\n    render() {\n        return (\n            <Modal\n                title=\"Điền tên của bạn\"\n                visible={store.visibleModalName}\n                footer={null}\n                closable={false}\n            >\n                <Form onSubmit={this.submitModalName}>\n                    <FormInput\n                        name=\"name\"\n                        suffixClear\n                        placeholder=\"Nhập tên của bạn\"\n                        rules={[\n                            {\n                                required: true,\n                                message: \"Vui lòng nhập tên của bạn!\"\n                            }\n                        ]}\n\n                    />\n                    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                        <FormButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                        >\n                            Đồng ý\n                        </FormButton>\n                    </div>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default ModalFormName;\n","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {Col, Row} from 'antd';\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\nconst RoomConstant = constant.Room;\n\n@observer\nclass ListRoom extends Component {\n\n    componentWillMount() {\n        socket.on(ClientListener.UPDATE_ROOM, (room) => {\n            store.updateRoom(room);\n        });\n        socket.on(ClientListener.JOINED_ROOM, (room) => {\n            store.updateRoom(room);\n            store.setCurrentRoom(room);\n        });\n        // socket.on(ClientListener.OUT_ROOM, (room) => {\n        //     store.updateRoom(room);\n        // });\n    }\n\n    joinRoom = (room) => {\n        console.log(room);\n        socket.emit(ServerListener.JOIN_ROOM, {roomId: room.id});\n    };\n\n    countPlayer = (room) => {\n        let count = 0;\n        if (!isEmpty(room.playerWhite)) {\n            count++;\n        }\n        if (!isEmpty(room.playerBlack)) {\n            count++;\n        }\n        return count;\n    };\n\n    renderRoom = (room) => {\n        const numberPlayer = this.countPlayer(room);\n        return (\n            <Col span={4}>\n                <div className=\"room\" onClick={() => {\n                    if (room.status != 2) this.joinRoom(room)\n                }}>\n                    <div className={\"room-empty \" + `room-${room.status}-user`}>\n                        <div className=\"text\">\n                            {numberPlayer}/2\n                        </div>\n                    </div>\n                    <div className=\"room-name\">\n                        Phòng {room.id}\n                    </div>\n                </div>\n\n            </Col>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n\n                <Row gutter={24}>\n                    {\n                        store.roomsStore.map((room, index) => {\n                            return this.renderRoom(room);\n                        })\n                    }\n                </Row>\n            </div>\n\n        );\n    }\n}\n\nexport default ListRoom;\n","function isUndefined(data) {\n    return data === undefined;\n}\n\nfunction isNull(data) {\n    return data == null;\n}\n\nfunction isNotValue(data) {\n    return data == \"\";\n}\n\nfunction isEmpty(data) {\n    return isUndefined(data) || isNull(data) || isNotValue(data);\n}\n\nexport function removeObservable(dataInput) {\n\n    if (isUndefined(dataInput)) return undefined;\n\n    if (isNull(dataInput)) return null;\n\n    if (dataInput.slice && Array.isArray(dataInput.slice())) {\n        return dataInput.map((item) => {\n            return removeObservable(item);\n        });\n    }\n\n    if ((typeof dataInput) === 'object') {\n        return Object.entries(dataInput).reduce((acc, [key, value]) => {\n            return {...acc, [key]: removeObservable(value)};\n        }, {});\n    }\n\n    return dataInput;\n}","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport store from \"../Store\";\nimport {removeObservable} from \"../helpers/entity/mobx\";\nimport socket from \"../services/socketio\";\nimport constant from \"../constants\";\nimport {isEmpty} from \"../helpers/utility\";\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\nconst ClientConstant = constant.Client;\nconst RoomConstant = constant.Room;\n\nconst XX = [-1, -1, -1, 1, 1, 1, 0, 0];\nconst YY = [-1, 0, 1, -1, 0, 1, -1, 1];\n\nfunction evaluateMove(board, chessman, reverseChessman, x, y, xMove, yMove) {\n    let count = 0;\n    let x1 = x + xMove;\n    let y1 = y + yMove;\n    while (true) {\n        if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n            return false;\n        }\n\n        if (board[x1][y1] == reverseChessman) {\n            count++;\n        } else {\n            if (board[x1][y1] == chessman) {\n                break;\n            } else {\n                return false;\n            }\n\n        }\n        x1 = x1 + xMove;\n        y1 = y1 + yMove;\n    }\n\n    if (count > 0) {\n        return true;\n    }\n\n    return false;\n\n}\n\nfunction reverseCell(board, chessman, reverseChessman, x, y, xMove, yMove) {\n    console.log(xMove + \",\", yMove);\n    let x1 = x + xMove;\n    let y1 = y + yMove;\n    while (true) {\n\n        if (!(0 <= x1 && x1 < 8 && 0 <= y1 && y1 < 8)) {\n            return;\n        }\n\n        if (board[x1][y1] == reverseChessman) {\n            console.log(board);\n            board[x1][y1] = chessman;\n        } else {\n            if (board[x1][y1] == chessman) {\n                break;\n            } else {\n                return;\n            }\n\n        }\n        x1 = x1 + xMove;\n        y1 = y1 + yMove;\n    }\n}\n\n@observer\nclass ListRoom extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        socket.on(ClientListener.JOINED_GAME, (room) => {\n            store.updateRoom(room);\n        });\n\n        socket.on(ClientListener.UPDATE_BOARD, (room) => {\n            store.updateRoom(room);\n        });\n    }\n\n\n    onClickCell = (x, y, move) => {\n        store.getCurrentRoom.board[x][y] = store.player.chessman;\n\n        move.forEach((data) => {\n            reverseCell(store.getCurrentRoom.board, store.player.chessman, store.partner.chessman, x, y, data.xx, data.yy);\n        });\n\n        socket.emit(ServerListener.TICK, store.getCurrentRoom.board);\n\n    };\n\n    createFences = () => {\n        let fences = removeObservable(store.getCurrentRoom.board);\n        console.log(fences);\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == 1 || fences[i][j] == 2) {\n                    for (let k = 0; k < 8; k++) {\n                        if (0 <= i + XX[k] && i + XX[k] < 8 && 0 <= j + YY[k] && j + YY[k] < 8 && !fences[i + XX[k]][j + YY[k]]) {\n                            fences[i + XX[k]][j + YY[k]] = -1;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        return fences;\n    }\n\n    isAvailableMove = (fences, board, chessman) => {\n        let moves = new Array(8).fill(null).map(() => new Array(8));\n        let reverseChessman;\n        if (chessman == 1) {\n            reverseChessman = 2;\n        } else {\n            reverseChessman = 1;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (fences[i][j] == -1) {\n                    for (let k = 0; k < 8; k++) {\n                        let isEvaluateMove = evaluateMove(board, chessman, reverseChessman, i, j, XX[k], YY[k]);\n                        if (isEvaluateMove) {\n                            fences[i][j] = -2;\n                            if (moves[i][j] == undefined) {\n                                moves[i][j] = [];\n                            }\n                            moves[i][j].push({xx: XX[k], yy: YY[k]});\n                        }\n                    }\n                }\n            }\n        }\n        return moves;\n    }\n\n    renderBoard = () => {\n        let fences = this.createFences();\n        const moves = this.isAvailableMove(fences, store.getCurrentRoom.board, store.player.chessman);\n        console.log(store.player.chessman);\n        return (\n            <div className=\"board-game\">\n                {\n                    store.getCurrentRoom.board.map((row, indexX) => {\n                        return (\n                            <div className=\"board-row\" key={indexX}>\n                                {\n                                    row.map((cell, indexY) => {\n                                        return (\n                                            <div\n                                                className=\"cell-game\"\n                                                key={indexY}\n                                                onClick={() => {\n                                                    if (moves[indexX][indexY] && store.yourTurn) {\n                                                        this.onClickCell(indexX, indexY, moves[indexX][indexY]);\n                                                    }\n                                                }}>\n                                                {\n                                                    cell == RoomConstant.Board.Cell.BLACK ?\n                                                        <div className=\"dot-black\"/> :\n                                                        cell == RoomConstant.Board.Cell.WHITE ?\n                                                            <div className=\"dot-white\"/> :\n                                                            <div\n                                                                className={(moves[indexX][indexY] && store.yourTurn ?\n                                                                    (store.player.chessman == RoomConstant.Board.Cell.BLACK ?\n                                                                        \"hover-black\" : \"hover-white\") : \"not-allowed\")}/>\n                                                }\n\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </div>\n                        )\n\n                    })\n                }\n            </div>\n        )\n    };\n\n    render() {\n        const room = store.getCurrentRoom;\n\n        if (room.status == RoomConstant.Status.PLAYING) {\n            return this.renderBoard();\n        }\n\n        return <div className=\"waiting-partner\">Đang đợi đối thủ...</div>;\n    }\n}\n\nexport default ListRoom;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport store from \"./Store\";\nimport ModalFormName from \"./component/ModalFormName\";\nimport {Avatar, Divider, Layout} from 'antd';\nimport ListRoom from \"./component/ListRoom\";\nimport Board from \"./component/Board\";\nimport socket from \"./services/socketio\";\nimport constant from './constants';\n\nconst {Header, Sider, Content} = Layout;\n\nconst ClientListener = constant.ClientListener;\nconst ServerListener = constant.ServerListener;\n\n\n@observer\nclass App extends Component {\n\n    componentDidMount() {\n    }\n\n    render() {\n        const userStore = store.userStore;\n        return (\n            <div>\n                <ModalFormName/>\n                <Layout className=\"layout\">\n                    <Header>\n                        <div style={{color: '#fff', fontSize: '22px', fontWeight: 'bold', textAlign: 'center'}}>\n                            Chọn phòng\n                        </div>\n                    </Header>\n                    <Layout>\n                        <Sider width={200} style={{background: '#fff'}}>\n                            <div style={{\n                                padding: 20,\n                                display: 'flex',\n                                alignItems: 'center',\n                                flexDirection: 'column'\n                            }}>\n                                <Avatar size={100} icon=\"user\"/>\n                                <div style={{marginTop: 20}}>\n                                    Xin chào,\n                                </div>\n                                <div style={{fontWeight: 'bold'}}>{userStore.name}</div>\n                                <Divider/>\n                            </div>\n\n                        </Sider>\n                        <Content\n                            style={{\n                                background: '#e2e2e2',\n                                padding: 24,\n                                margin: 0,\n                                minWidth: '800px',\n                                minHeight: 'calc(100vh - 64px)'\n                            }}>\n                            <div style={{\n                                background: '#fff',\n                                width: '100%',\n                                height: '100%',\n                                padding: 24,\n                                borderRadius: '10px',\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center'\n                            }}>\n                                {\n                                    store.status == \"choose room\" ? <ListRoom/> : <Board/>\n                                }\n\n\n                            </div>\n                        </Content>\n                    </Layout>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a services worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our services worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a services worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // services worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a services ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register services worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous services worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during services worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the services worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure services worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No services worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about services workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}